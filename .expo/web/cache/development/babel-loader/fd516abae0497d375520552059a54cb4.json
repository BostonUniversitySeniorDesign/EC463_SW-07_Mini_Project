{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/nancyzheng/EC463_SW-07_Mini_Project/screens/ScanScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { BarCodeScanner } from 'expo-barcode-scanner';\n\nfunction ScanScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref2) {\n    var type = _ref2.type,\n        data = _ref2.data;\n    setScanned(true);\n    temp = web_head + data.substring(1) + web_tail;\n    return Alert.alert('Scanned!', \"Bar code with type \" + type + \" and data \" + data + \" has been scanned!\");\n  };\n\n  if (hasPermission === null) {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 16\n      }\n    }, \"Requesting for camera permission\");\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 16\n      }\n    }, \"No access to camera\");\n  }\n\n  var opacity = 'rgba(0, 0, 0, .6)';\n  var styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      flexDirection: 'column',\n      justifyContent: \"center\"\n    },\n    description: {\n      fontSize: 20,\n      marginTop: \"70%\",\n      textAlign: \"center\",\n      color: \"white\"\n    },\n    layerTop: {\n      flex: 2,\n      backgroundColor: opacity\n    },\n    layerCenter: {\n      flex: 1,\n      flexDirection: 'row'\n    },\n    layerLeft: {\n      flex: 1,\n      backgroundColor: opacity\n    },\n    focused: {\n      flex: 10\n    },\n    layerRight: {\n      flex: 1,\n      backgroundColor: opacity\n    },\n    layerBottom: {\n      flex: 2,\n      backgroundColor: opacity\n    }\n  });\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, React.createElement(BarCodeScanner, {\n    onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n    style: [StyleSheet.absoluteFill, styles.container],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: styles.layerTop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: styles.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }\n  }, \"Scan your barcode\")), React.createElement(View, {\n    style: styles.layerCenter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, React.createElement(View, {\n    style: styles.layerLeft,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }), React.createElement(View, {\n    style: styles.focused,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }\n  }), React.createElement(View, {\n    style: styles.layerRight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  })), React.createElement(View, {\n    style: styles.layerBottom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  })), scanned && React.createElement(Button, {\n    title: 'Tap to Scan Again',\n    onPress: function onPress() {\n      setScanned(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 25\n    }\n  }), scanned && React.createElement(Button, {\n    title: 'Go to Result',\n    onPress: function onPress() {\n      return navigation.navigate('Scan Result');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }\n  }));\n}\n\nexport default ScanScreen;","map":{"version":3,"sources":["/Users/nancyzheng/EC463_SW-07_Mini_Project/screens/ScanScreen.js"],"names":["React","useState","useEffect","BarCodeScanner","ScanScreen","navigation","hasPermission","setHasPermission","scanned","setScanned","requestPermissionsAsync","status","handleBarCodeScanned","type","data","temp","web_head","substring","web_tail","Alert","alert","opacity","styles","StyleSheet","create","container","flex","flexDirection","justifyContent","description","fontSize","marginTop","textAlign","color","layerTop","backgroundColor","layerCenter","layerLeft","focused","layerRight","layerBottom","undefined","absoluteFill","navigate"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button, StyleSheet, Text, View } from 'react-native';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\n\n\nfunction ScanScreen({ navigation }) {\n    const [hasPermission, setHasPermission] = useState(null);\n    const [scanned, setScanned] = useState(false);\n    \n\n    useEffect(() => {\n        (async () => {\n            const { status } = await BarCodeScanner.requestPermissionsAsync();\n            setHasPermission(status === 'granted');\n        })();\n    }, []);\n\n    const handleBarCodeScanned = ({ type, data }) => {\n        setScanned(true);\n        temp = web_head + data.substring(1) + web_tail; //create url for api and save into variable\n        return (\n            Alert.alert(\n                'Scanned!',\n                `Bar code with type ${type} and data ${data} has been scanned!`,\n                )\n        );\n        \n    }\n    \n    if (hasPermission === null) {\n        return <Text>Requesting for camera permission</Text>;\n    }\n    if (hasPermission === false) {\n        return <Text>No access to camera</Text>;\n    }\n\n    const opacity = 'rgba(0, 0, 0, .6)';\n    const styles = StyleSheet.create({\n        container: {\n            flex: 1,\n            flexDirection: 'column',\n            justifyContent: \"center\",\n        },\n        description: {\n            fontSize: 20,\n            marginTop: \"70%\",\n            textAlign: \"center\",\n            color: \"white\",\n        },\n        layerTop: {\n            flex: 2,\n            backgroundColor: opacity\n        },\n        layerCenter: {\n            flex: 1,\n            flexDirection: 'row'\n        },\n        layerLeft: {\n            flex: 1,\n            backgroundColor: opacity\n        },\n        focused: {\n            flex: 10\n        },\n        layerRight: {\n            flex: 1,\n            backgroundColor: opacity\n        },\n        layerBottom: {\n            flex: 2,\n            backgroundColor: opacity\n        },\n    });\n\n    \n\n    return (\n        \n        <View style={styles.container}>\n            <BarCodeScanner\n                onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n                style={[StyleSheet.absoluteFill, styles.container]}\n            >\n                <View style={styles.layerTop}>\n                    <Text style={styles.description}>Scan your barcode</Text>\n                </View>\n                <View style={styles.layerCenter}>\n                    <View style={styles.layerLeft} />\n                    <View style={styles.focused}>\n                    </View>\n                    <View style={styles.layerRight} />\n                </View>\n                <View style={styles.layerBottom} />\n            </BarCodeScanner>\n            {scanned && <Button title={'Tap to Scan Again'} onPress={() => { setScanned(false) }} />}\n            {scanned && <Button title={'Go to Result'} onPress={() => navigation.navigate('Scan Result')} />}\n        </View>\n    );\n    \n}\n\nexport default ScanScreen;"]},"metadata":{},"sourceType":"module"}